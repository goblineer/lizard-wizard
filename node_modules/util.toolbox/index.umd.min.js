(function(a,b){if("function"==typeof define&&define.amd)define([],b);else if("undefined"!=typeof exports)b();else{b(),a.index={exports:{}}.exports}})(this,function(){"use strict";var a=Math.floor,b=Math.ceil;Object.defineProperty(exports,"__esModule",{value:!0});var c=require("util.rstrip"),d=require("uuid");exports.encoding="utf-8",exports.success=0,exports.failure=127,exports.isDarwin=/^darwin/.test(process.platform),exports.isLinux=/^linux/.test(process.platform),exports.isMac=/^darwin/.test(process.platform),exports.isWin=/^win/.test(process.platform),exports.nil=function(a,b){a=a,b=b},exports.nilEvent=function(){},exports.closestNumber=/**
 * Takes an array of numbers and finds the closest value to the given
 * input number.
 *
 * Inspired by https://github.com/andreruffert/closest-number
 *
 * @param arr {number[]} array of numbers to search
 * @param num {number} the number value used as a reference to find
 * @returns {number} the number from arr that is closest to num
 */function(a,b){return a.reduce(function(a,c){var d=Math.abs;return d(c-b)<d(a-b)?c:a})},exports.getRandomInt=/**
 * Generates a random integer between the two specified values.  The value is
 * no lower than min and not equal to max (not inclusive).  Do not use this
 * for cryptography.
 *
 * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/random
 *
 * @param min {number} the smallest integer to use, inclusive
 * @param max {number} the largest integer to use, non inclusive
 * @returns {number} a pseudo random number
 */function(c,d){return c=b(c),d=a(d),a(Math.random()*(d-c))+c},exports.getRandomIntInclusive=/**
 * Generates a random integer between the two specified values.  The value is
 * no lower than min and less than or equal to max (inclusive).  Do not use this
 * for cryptography.
 *
 * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/random
 *
 * @param min {number} the smallest integer to use, inclusive
 * @param max {number} the largest integer to use, inclusive
 * @returns {number} a pseudo random number
 */function(c,d){return c=b(c),d=a(d),a(Math.random()*(d-c+1))+c},exports.getUUID=/**
 * Retrieves a version 4 uuid.  It can be with or without the dash characters.
 * @param nodash {boolean} if true, the dashes are removed, otherwise just a
 * v4 uuid is created.
 * @returns {string} a v4 uuid
 */function(){var a=!!(0<arguments.length&&arguments[0]!==void 0)&&arguments[0];return a?d.v4().replace(/-/g,""):d()},exports.sanitize=/**
 * Takes a data buffer of output bytes, converts it to a string and then splits
 * it on newlines for output.  By default it is just saved into a sanitized
 * array.  If verbose is set to true, then the buffer it output to the console
 * line by line.
 * @param buffer {string} the output bytes to convert and print to log.
 * @param verbose {boolean} if true, then the sanitized output is sent to
 * the console.
 * @param log {console.log} the output logger to write the output when verbose.
 * @retuns {string[]} an array of string that represent the lines given with
 * the input buffer.
 */function(a){var b=!!(1<arguments.length&&void 0!==arguments[1])&&arguments[1],d=2<arguments.length&&void 0!==arguments[2]?arguments[2]:console.log;if(null==a&&"string"!=typeof a&&!(a instanceof Buffer))return[];a instanceof Buffer&&(a=a.toString()),a=c.rstrip(a);var e=a.split(/\r\n|\r|\n/).map(c.rstrip);return b&&e.forEach(function(a){d(a)}),e}});
