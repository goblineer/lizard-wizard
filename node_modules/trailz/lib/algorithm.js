"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const aldousbroder_1 = require("./aldousbroder");
exports.AldousBroder = aldousbroder_1.AldousBroder;
const binarytree_1 = require("./binarytree");
exports.BinaryTree = binarytree_1.BinaryTree;
const huntandkill_1 = require("./huntandkill");
exports.HuntAndKill = huntandkill_1.HuntAndKill;
const recursivebacktracker_1 = require("./recursivebacktracker");
exports.RecursiveBacktracker = recursivebacktracker_1.RecursiveBacktracker;
const sidewinder_1 = require("./sidewinder");
exports.Sidewinder = sidewinder_1.Sidewinder;
const wilsons_1 = require("./wilsons");
exports.Wilsons = wilsons_1.Wilsons;
var AlgorithmType;
(function (AlgorithmType) {
    AlgorithmType["AldousBroder"] = "AldousBroder";
    AlgorithmType["BinaryTree"] = "BinaryTree";
    AlgorithmType["HuntAndKill"] = "HuntAndKill";
    AlgorithmType["RecursiveBacktracker"] = "RecursiveBacktracker";
    AlgorithmType["Sidewinder"] = "Sidewinder";
    AlgorithmType["Wilsons"] = "Wilsons";
})(AlgorithmType = exports.AlgorithmType || (exports.AlgorithmType = {}));
/**
 * Takes a string, generally from the command line, and determines
 * the requested algorithm.  It will default to BinaryTree if a
 * valid name is not given.
 * @param name {string} the name of the requested algorithm
 * @return {AlgorithmType} the proper enum for an algorithm used by Maze
 */
function getAlgorithmType(name) {
    if (name && typeof name === "string") {
        name = name.trim().toUpperCase();
    }
    else {
        return AlgorithmType.BinaryTree;
    }
    switch (name.toUpperCase()) {
        case "AB":
        case "ALDOUSBRODER":
            return AlgorithmType.AldousBroder;
        case "HK":
        case "HUNTANDKILL":
            return AlgorithmType.HuntAndKill;
        case "RB":
        case "RECURSIVEBACKTRACKER":
            return AlgorithmType.RecursiveBacktracker;
        case "SW":
        case "SIDEWINDER":
            return AlgorithmType.Sidewinder;
        case "WI":
        case "WILSONS":
            return AlgorithmType.Wilsons;
        case "BT":
        case "BINARYTREE":
        default:
            return AlgorithmType.BinaryTree;
    }
}
exports.getAlgorithmType = getAlgorithmType;
//# sourceMappingURL=algorithm.js.map