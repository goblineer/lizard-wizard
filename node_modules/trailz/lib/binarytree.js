/**
 * Implementation of the BinaryTree maze algorithm from the book
 * "Mazes for Programmers".  This algorithm works by visiting each cell
 * in the grid and choosing to carve a passage either north or south.
 *
 * #### Examples:
 *
 * ```javascript
 * import {AlgorithmType, Maze} from 'trailz';
 *
 * const maze = new Maze(10, 10, AlgorithmType.BinaryTree);
 * console.log(maze.string);
 * ```
 *
 * Creates a 10x10 grid and uses the BinaryTree algorithm to carve a
 * maze.  The `.string` property will return an ascii representation
 * of the maze.
 *
 *
 * @module BinaryTree
 */
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const _ = require("lodash");
class BinaryTree {
    process(grid) {
        for (const cell of grid) {
            const neighbors = [];
            if (cell.north)
                neighbors.push(cell.north);
            if (cell.east)
                neighbors.push(cell.east);
            const neighbor = _.sample(neighbors);
            if (neighbor) {
                cell.link(neighbor);
            }
        }
        return grid;
    }
}
exports.BinaryTree = BinaryTree;
//# sourceMappingURL=binarytree.js.map