/**
 * Creates an instance of a Maze structure.  A maze is created within an
 * M x N grid of cells.  This grid is then given to a processing Algorithm
 * to carve out passages within the grid.
 *
 * #### Examples:
 *
 * ```javascript
 * import {AlgorithmType, Maze} from 'trailz';
 * const maze = new Maze(10, 10, AlgorithmType.BinaryTree);
 * console.log(maze.string);
 * ```
 *
 * @module Maze
 */
import { AlgorithmType } from "./algorithm";
import { Grid } from "./grid";
export declare class Maze {
    private _algorithm;
    private _algorithms;
    private _grid;
    constructor(rows: number, cols: number, algorithm?: AlgorithmType);
    /**
     * @return {string} the algorithm currently set within this instance.
     */
    readonly algorithm: AlgorithmType;
    /**
     * @return {number} the number of columns in this maze
     */
    readonly cols: number;
    /**
     * @return {Grid} returns a reference to the grid within the Maze instance
     */
    readonly grid: Grid;
    /**
     * @return {number[][]} a 2D array that represents how each cell is drawn
     */
    readonly repr: number[][];
    /**
     * @return {number} the number of rows in this maze
     */
    readonly rows: number;
    /**
     * @return {string} a string representation of the 2D repr array
     */
    readonly srepr: string;
    /**
     * @return {string} an ASCII string representation of the maze
     */
    readonly string: string;
    /**
     * Takes a given maze algorithm, resets the gride and applies this algorithm to the
     * grid.  The previous grid is lost with this operation.
     * @param algorithm {AlgorithmType} the algorithm that will be applied to the grid.
     * this is an enumeration with the possible types that can be generated.
     */
    rebuild(algorithm: AlgorithmType): void;
    /**
     * Allows one to change the initial size of the grid.  This will created the grid and
     * apply the given algorithm to the newly sized grid.
     * @param rows {number} the new number of rows in this grid
     * @param cols {number} the new number of cols in this grid
     * @param [algorithm] {AlgorithmType} the maze algorithm that will be applied to the
     * grid.  If one is not given, then the initial algorithm is reapplied.
     */
    resize(rows: number, cols: number, algorithm?: AlgorithmType): void;
}
